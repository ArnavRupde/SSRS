# -*- coding: utf-8 -*-
"""Sales_Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Jzv75_xicrfGEeXhaZzmJ6jOEIeYYagH
"""





from __future__ import print_function
import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
from keras.layers.core import Dense, Activation, Dropout
from keras.layers.recurrent import LSTM
from keras.models import Sequential
from sklearn.model_selection import  train_test_split
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt
import math
import sqlite3
import requests

look_back = 7
epochs = 50
batch_size = 32

np.random.seed(7)
# read all prices using panda
prices_dataset =  pd.read_csv('apple3.csv', header=0)

# filter out only data of Apple
apple = prices_dataset[prices_dataset['symbol']=='AAPL']
# apple['sales']=apple['sales']//5
# apple.to_csv('apple3.csv')
lastrows=  apple.tail(90)
print(lastrows)
apple.drop(apple.tail(90).index,inplace=True)
originalsize=len(apple)
apple=apple.append(lastrows, ignore_index = True)

print(originalsize)
apple_stock_prices = apple.sales.values.astype('float32')
print(apple_stock_prices)
# reshape to column vector
apple_stock_prices = apple_stock_prices.reshape(len(apple_stock_prices), 1)
# normalize the dataset
scaler = MinMaxScaler(feature_range=(0, 1))
apple_stock_prices = scaler.fit_transform(apple_stock_prices)
# split data into training set and test set
train_size = originalsize
test_size = len(apple_stock_prices) - train_size
print(train_size,test_size)
train, test = apple_stock_prices[0:train_size,:], apple_stock_prices[train_size:len(apple_stock_prices),:]
# print(test)
print('Split data into training set and test set... Number of training samples/ test samples:', len(train), len(test))

# convert an array of values into a time series dataset 
# in form 
#                     X                     Y
# t-look_back+1, t-look_back+2, ..., t     t+1

def create_dataset(dataset, look_back):
	dataX, dataY = [], []
	for i in range(len(dataset)-look_back-1):
		a = dataset[i:(i+look_back), 0]
		dataX.append(a)
		dataY.append(dataset[i + look_back, 0])
	return np.array(dataX), np.array(dataY)

# convert Apple's stock price data into time series dataset
trainX, trainY = create_dataset(train, look_back)
#Commented by AR
# testX, testY = create_dataset(test, look_back)

# reshape input of the LSTM to be format [samples, time steps, features]
trainX = np.reshape(trainX, (trainX.shape[0], trainX.shape[1], 1))
#Commented by AR
# testX = np.reshape(testX, (testX.shape[0], testX.shape[1], 1))
# create and fit the LSTM network
model = Sequential()
model.add(LSTM(4, input_shape=(look_back, 1)))
model.add(Dense(1))
model.compile(loss='mse', optimizer='adam')
model.fit(trainX, trainY, nb_epoch=epochs, batch_size=batch_size)

# make predictions
trainPredict = model.predict(trainX)
#Commented by AR
# testPredict = model.predict(testX)
# invert predictions and targets to unscaled
trainPredict = scaler.inverse_transform(trainPredict)
trainY = scaler.inverse_transform([trainY])
#Commented by AR
# testPredict = scaler.inverse_transform(testPredict)
#Commented by AR
# testY = scaler.inverse_transform([testY])

# calculate root mean squared error
trainScore = math.sqrt(mean_squared_error(trainY[0], trainPredict[:,0]))
print('Train Score: %.2f RMSE' % (trainScore))

#Commented by AR
# testScore = math.sqrt(mean_squared_error(testY[0], testPredict[:,0]))
# print('Test Score: %.2f RMSE' % (testScore))

testX, testY = create_dataset(test, look_back)
testX = np.reshape(testX, (testX.shape[0], testX.shape[1], 1))
testPredict = model.predict(testX)
testPredict = scaler.inverse_transform(testPredict)
testY = scaler.inverse_transform([testY])
print(testPredict.sum())

#shift predictions of training data for plotting
trainPredictPlot = np.empty_like(apple_stock_prices)
trainPredictPlot[:, :] = np.nan
trainPredictPlot[look_back:len(trainPredict)+look_back, :] = trainPredict

# shift predictions of test data for plotting
testPredictPlot = np.empty_like(apple_stock_prices)
testPredictPlot[:, :] = np.nan
testPredictPlot[len(trainPredict)+(look_back*2)+1:len(apple_stock_prices)-1, :] = testPredict



# plt.plot(scaler.inverse_transform(apple_stock_prices))
plt.plot(trainPredictPlot,label='Sales History')
plt.plot(testPredictPlot,label='Future Sales')
plt.xlabel('Days')
plt.ylabel('Sales')
plt.title('Sales Predictions')
plt.legend()
plt.savefig("1.jpg", bbox_inches='tight')
plt.show()
# plt.savefig("1.jpg", bbox_inches='tight')

predictionss=int(testPredict.sum())

print(predictionss)
pid=1
with sqlite3.connect('database.db') as conn:
    try:
        cur = conn.cursor()
        cur.execute('''INSERT INTO futuresales (productId,stock) VALUES (?, ?)''', (pid, predictionss))
        conn.commit()
        msg="added successfully"
        print("Successful")
    except:
        msg="error occured"
        cur = conn.cursor()
        cur.execute("""UPDATE futuresales SET stock = ?  WHERE productId= ? """, (predictionss,pid))
        print("Update Done")
        conn.commit()
        conn.rollback()
conn.close()

# url = "https://www.fast2sms.com/dev/bulk"           
# msg="Available Stock for IPhone X in our inventory is low..Check the App to place order.."
# querystring = {"authorization":"2ndrfwRFhotlDvcy3P8mbKIWxGsq5j0V1gO4iTAQMLUJzYCe9ZsR0OdaCYXHPIm3kg9Lnufv5r2JTDWU","sender_id":"FSTSMS","message":msg,"language":"english","route":"p","numbers":"9834576425"}

# headers = {
#     'cache-control': "no-cache"
# }

# response = requests.request("GET", url, headers=headers, params=querystring)

# print(response.text)

